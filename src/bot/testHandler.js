const Test = require("../models/testModel");
const { createTest, saveUserResult } = require("../controllers/testController");

const userSessions = {};
const testCreationSessions = {};

const admins = [940993779]; // ID –∞–¥–º–∏–Ω–æ–≤

// üìå –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞
async function startTest(bot, msg) {
  const tests = await Test.find();
  if (!tests.length) return bot.sendMessage(msg.chat.id, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.");

  const buttons = tests.map((test) => [{ text: test.title, callback_data: `start_${test._id}` }]);

  bot.sendMessage(msg.chat.id, "üìå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:", {
    reply_markup: { inline_keyboard: buttons },
  });
}

// üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
async function handleTestAnswer(bot, callbackQuery) {
  const data = callbackQuery.data;
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;

  if (data.startsWith("start_")) {
    const testId = data.split("_")[1];
    userSessions[userId] = { testId, currentQuestion: 0, answers: [] };
    return sendQuestion(bot, chatId, userId);
  }

  if (data.startsWith("answer_")) {
    const [_, qIndex, chosenAnswer] = data.split("_");
    const session = userSessions[userId];
    if (!session) return;

    const test = await Test.findById(session.testId);
    const question = test.questions[Number(qIndex)];

    const isCorrect = question.options.some((opt) => opt.text === chosenAnswer && opt.isCorrect);
    session.answers.push({ question: question.text, chosenAnswer, isCorrect });

    bot.answerCallbackQuery(callbackQuery.id, { text: isCorrect ? "‚úÖ –í–µ—Ä–Ω–æ!" : "‚ùå –ù–µ–≤–µ—Ä–Ω–æ" });

    session.currentQuestion++;
    if (session.currentQuestion < test.questions.length) {
      sendQuestion(bot, chatId, userId);
    } else {
      await saveUserResult(userId, session.testId, session.answers);
      sendFinalResults(bot, chatId, session.answers);
      delete userSessions[userId];
    }
  }
}

// üìå –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
async function sendQuestion(bot, chatId, userId) {
  const session = userSessions[userId];
  const test = await Test.findById(session.testId);
  const question = test.questions[session.currentQuestion];

  const options = question.options.map((opt) => ({
    text: opt.text,
    callback_data: `answer_${session.currentQuestion}_${opt.text}`,
  }));

  bot.sendMessage(chatId, `‚ùì ${question.text}`, { reply_markup: { inline_keyboard: [options] } });
}

// üìå –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
async function startCreatingTest(bot, msg) {
  if (!admins.includes(msg.from.id)) return bot.sendMessage(msg.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!");

  testCreationSessions[msg.from.id] = { title: "", questions: [], step: 0 };

  bot.sendMessage(msg.chat.id, "üìù –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç", callback_data: "create_test" }],
      ],
    },
  });
}

// üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
async function handleCreateTest(bot, callbackQuery) {
  const userId = callbackQuery.from.id;
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;

  if (data === "create_test") {
    testCreationSessions[userId] = { title: "", questions: [], step: 1 };
    bot.sendMessage(chatId, "‚úç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞:");
  } else if (data === "add_question") {
    bot.sendMessage(chatId, "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:");
    testCreationSessions[userId].step = 2;
  } else if (data === "finish_test") {
    const testData = testCreationSessions[userId];
    if (!testData || !testData.title || testData.questions.length === 0) {
      return bot.sendMessage(chatId, "‚ùå –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç–æ–π —Ç–µ—Å—Ç!");
    }

    await createTest(testData);
    delete testCreationSessions[userId];
    bot.sendMessage(chatId, "‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");
  }
}

// üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
async function handleTextMessage(bot, msg) {
  const userId = msg.from.id;
  const chatId = msg.chat.id;
  const session = testCreationSessions[userId];

  if (!session) return;

  if (session.step === 1) {
    session.title = msg.text;
    bot.sendMessage(chatId, "üìå –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å:", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data: "add_question" }],
        ],
      },
    });
  } else if (session.step === 2) {
    session.questions.push({ text: msg.text, options: [] });
    session.step = 3;
    bot.sendMessage(chatId, "‚úè –î–æ–±–∞–≤—å—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ):");
  } else if (session.step === 3) {
    const currentQuestion = session.questions[session.questions.length - 1];
    currentQuestion.options.push({ text: msg.text, isCorrect: false });

    bot.sendMessage(chatId, `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç: "${msg.text}". –°–¥–µ–ª–∞—Ç—å –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º?`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚úÖ –î–∞", callback_data: `set_correct_${currentQuestion.options.length - 1}` }],
          [{ text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ—Ç–≤–µ—Ç", callback_data: "add_more_answers" }],
          [{ text: "‚è≠ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data: "next_question" }],
        ],
      },
    });
  }
}

// üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
async function handleCorrectAnswer(bot, callbackQuery) {
  const userId = callbackQuery.from.id;
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;

  if (!testCreationSessions[userId] || !data.startsWith("set_correct_")) return;

  const index = Number(data.split("_")[2]);
  const currentQuestion = testCreationSessions[userId].questions[testCreationSessions[userId].questions.length - 1];

  currentQuestion.options[index].isCorrect = true;
  bot.sendMessage(chatId, "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!");
}

// üìå –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∏ —Ç–µ—Å—Ç–∞
async function handleNextQuestion(bot, callbackQuery) {
  const userId = callbackQuery.from.id;
  const chatId = callbackQuery.message.chat.id;

  bot.sendMessage(chatId, "üìå –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω! –ß—Ç–æ –¥–∞–ª—å—à–µ?", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å", callback_data: "add_question" }],
        [{ text: "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç", callback_data: "finish_test" }],
      ],
    },
  });
}

module.exports = {
  startTest,
  handleTestAnswer,
  startCreatingTest,
  handleCreateTest,
  handleTextMessage,
  handleCorrectAnswer,
  handleNextQuestion,
};
