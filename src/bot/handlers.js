const {
  startTest,
  handleTestAnswer,
  startCreatingTest,
} = require("./testHandler");
const { getAllTests, deleteTest } = require("../controllers/testController");
const Settings = require("../models/settingsModel");

const admins = [940993779];

// üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
function handleButtons(bot) {
  bot.on("message", async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = msg.text;

    if (text === "/start" || text === "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é") {
      sendWelcomeMessage(bot, chatId);
      return sendMainMenu(bot, chatId, userId);
    }

    if (text === "üìã –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤") {
      return sendTestList(bot, chatId, userId);
    }

    if (text === "üéØ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç") {
      return startTest(bot, msg);
    }

    if (text === "‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç" && admins.includes(msg.from.id)) {
      return startCreatingTest(bot, msg);
    }

    if (text === "üóë –£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç" && admins.includes(msg.from.id)) {
      return sendDeleteTestMenu(bot, chatId, userId);
    }

    if (text === "üì¢ –†–∞—Å—Å—ã–ª–∫–∞" && admins.includes(msg.from.id)) {
      return sendBroadcastMenu(bot, chatId, userId);
    }
  });

  bot.on("callback_query", async (callbackQuery) => {
    handleTestAnswer(bot, callbackQuery);
  });
}

// üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function sendMainMenu(bot, chatId, userId) {
  let keyboard;
  if (admins.includes(userId)) {
    keyboard = {
      reply_markup: {
        keyboard: [
          ["üìã –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤", "üéØ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"],
          ["‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç", "üóë –£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç"],
          ["üì¢ –†–∞—Å—Å—ã–ª–∫–∞", "‚ùì –ü–æ–º–æ—â—å"],
        ],
        resize_keyboard: true,
      },
    };
  } else {
    keyboard = {
      reply_markup: {
        keyboard: [["üéØ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", "‚ùì –ü–æ–º–æ—â—å"]],
        resize_keyboard: true,
      },
    };
  }
  bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", keyboard);
}

const sendWelcomeMessage = (bot, chatId) => {
  bot.sendMessage(chatId, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!");
};

// üìå –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
async function sendTestList(bot, chatId) {
  const tests = await getAllTests();
  if (!tests.length) return bot.sendMessage(chatId, "‚ùå –¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");

  const buttons = tests.map((test) => [
    { text: test.title, callback_data: `start_${test._id}` },
  ]);

  bot.sendMessage(chatId, "üìã –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤:", {
    reply_markup: { inline_keyboard: buttons },
  });
}

// üìå –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
async function sendDeleteTestMenu(bot, chatId) {
  const tests = await getAllTests();
  if (!tests.length)
    return bot.sendMessage(chatId, "‚ùå –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");

  const buttons = tests.map((test) => [
    { text: `üóë ${test.title}`, callback_data: `delete_${test._id}` },
  ]);

  bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", {
    reply_markup: { inline_keyboard: buttons },
  });

  bot.on("callback_query", async (callbackQuery) => {
    const data = callbackQuery.data;
    if (data.startsWith("delete_")) {
      await deleteTest(data.split("_")[1]);
      bot.sendMessage(chatId, "‚úÖ –¢–µ—Å—Ç —É–¥–∞–ª—ë–Ω.");
    }
  });
}

// üìå –ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏
async function sendBroadcastMenu(bot, chatId, userId) {
  const settings = await Settings.findOne();
  const text = `üì¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:`;

  bot
    .sendMessage(
      chatId,
      `–í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: \n${settings?.broadcastMessage}`
    )
    .then(() => {
      bot.sendMessage(chatId, text, {
        reply_markup: {
          keyboard: [["–ù–∞–∑–∞–¥"]],
          resize_keyboard: true,
        },
      });
    });

  bot.once("message", async (msg) => {
    if (msg.text === "–ù–∞–∑–∞–¥") {
      return sendMainMenu(bot, chatId, userId);
    }
    if (!admins.includes(msg.from.id)) return;
    await Settings.updateOne(
      {},
      { broadcastMessage: msg.text },
      { upsert: true }
    );
    bot.sendMessage(chatId, "‚úÖ –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.");
    sendMainMenu(bot, chatId, userId);
  });
}

module.exports = { handleButtons };
