const { getAllTests, deleteTest } = require("../controllers/testController");
const Settings = require("../models/settingsModel");
const User = require("../models/userModel");
const Test = require("../models/testModel");
const Result = require("../models/resultModel");

const admins = [940993779];
const userStates = new Map();

function handleButtons(bot) {
  bot.on("message", async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = msg.text;

    await User.findOneAndUpdate(
      { userId },
      { userId, username: msg.from.username || msg.from.first_name },
      { upsert: true }
    );

    if (text === "/start" || text === "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é") {
      sendWelcomeMessage(bot, chatId);
      return sendMainMenu(bot, chatId, userId);
    }

    if (text === "üìã –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤") {
      return sendTestList(bot, chatId);
    }

    if (text === "üéØ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç") {
      return sendTestList(bot, chatId);
    }

    if (text === "‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç" && admins.includes(userId)) {
      return startCreatingTest(bot, msg);
    }

    if (text === "üóë –£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç" && admins.includes(userId)) {
      return sendDeleteTestMenu(bot, chatId);
    }

    if (text === "üì¢ –†–∞—Å—Å—ã–ª–∫–∞" && admins.includes(userId)) {
      return sendBroadcastMenu(bot, chatId, userId);
    }

    if (text === "üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É" && admins.includes(userId)) {
      return sendBroadcast(bot, chatId);
    }

    const state = userStates.get(chatId);
    if (state && state.action) {
      handleStatefulInput(bot, msg, state);
    }
  });

  bot.on("callback_query", async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;

    await bot.answerCallbackQuery(callbackQuery.id);

    if (data.startsWith("start_")) {
      const testId = data.split("_")[1];
      return startTest(bot, chatId, userId, testId);
    }

    if (data.startsWith("delete_") && admins.includes(userId)) {
      const testId = data.split("_")[1];
      await deleteTest(testId);
      return bot.sendMessage(chatId, "‚úÖ –¢–µ—Å—Ç —É–¥–∞–ª—ë–Ω.");
    }

    if (data.startsWith("answer_")) {
      return handleTestAnswer(bot, callbackQuery);
    }
  });
}

function sendMainMenu(bot, chatId, userId) {
  let keyboard;
  if (admins.includes(userId)) {
    keyboard = {
      reply_markup: {
        keyboard: [
          ["üìã –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤", "üéØ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"],
          ["‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç", "üóë –£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç"],
          ["üì¢ –†–∞—Å—Å—ã–ª–∫–∞", "üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"],
        ],
        resize_keyboard: true,
      },
    };
  } else {
    keyboard = {
      reply_markup: {
        keyboard: [["üéØ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", "‚ùì –ü–æ–º–æ—â—å"]],
        resize_keyboard: true,
      },
    };
  }
  bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", keyboard);
}

const sendWelcomeMessage = (bot, chatId) => {
  bot.sendMessage(chatId, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!");
};

async function sendTestList(bot, chatId) {
  const tests = await getAllTests();
  if (!tests.length) return bot.sendMessage(chatId, "‚ùå –¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");

  const buttons = tests.map((test) => [
    { text: test.title, callback_data: `start_${test._id}` },
  ]);

  bot.sendMessage(chatId, "üìã –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤:", {
    reply_markup: { inline_keyboard: buttons },
  });
}

async function sendDeleteTestMenu(bot, chatId) {
  const tests = await getAllTests();
  if (!tests.length)
    return bot.sendMessage(chatId, "‚ùå –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.");

  const buttons = tests.map((test) => [
    { text: `üóë ${test.title}`, callback_data: `delete_${test._id}` },
  ]);

  bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", {
    reply_markup: { inline_keyboard: buttons },
  });
}

async function sendBroadcastMenu(bot, chatId, userId) {
  const settings = await Settings.findOne();
  const text = `üì¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:`;

  bot
    .sendMessage(
      chatId,
      `–í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: \n<b>${
        settings?.broadcastMessage || "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞"
      }</b>`,
      { parse_mode: "HTML" }
    )
    .then(() => {
      bot.sendMessage(chatId, text, {
        reply_markup: {
          keyboard: [["–ù–∞–∑–∞–¥"]],
          resize_keyboard: true,
        },
      });
      userStates.set(chatId, { action: "set_broadcast", userId });
    });
}

async function sendBroadcast(bot, chatId) {
  const settings = await Settings.findOne();
  const users = await User.find();
  const broadcastMessage = settings?.broadcastMessage;

  if (!broadcastMessage) {
    return bot.sendMessage(chatId, "‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.");
  }

  for (const user of users) {
    try {
      await bot.sendMessage(user.userId, `<b>${broadcastMessage}</b>`, {
        parse_mode: "HTML",
      });
    } catch (error) {
      console.error(`Failed to send message to ${user.userId}:`, error);
    }
  }

  bot.sendMessage(chatId, "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.");
}

function startCreatingTest(bot, msg) {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞:");
  userStates.set(chatId, {
    action: "create_test",
    step: "title",
    test: { title: "", questions: [] },
  });
}

async function handleStatefulInput(bot, msg, state) {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (text === "–ù–∞–∑–∞–¥") {
    userStates.delete(chatId);
    return sendMainMenu(bot, chatId, msg.from.id);
  }

  if (state.action === "create_test") {
    if (state.step === "title") {
      state.test.title = text;
      bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:");
      state.step = "question";
    } else if (state.step === "question") {
      state.currentQuestion = { text, options: [] };
      bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ):");
      state.step = "options";
    } else if (state.step === "options") {
      const options = text
        .split("\n")
        .map((opt) => ({ text: opt.trim(), isCorrect: false }));
      state.currentQuestion.options = options;
      bot.sendMessage(
        chatId,
        `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (1-${options.length}):`
      );
      state.step = "correct_option";
    } else if (state.step === "correct_option") {
      const correctIndex = parseInt(text) - 1;
      if (
        correctIndex >= 0 &&
        correctIndex < state.currentQuestion.options.length
      ) {
        state.currentQuestion.options[correctIndex].isCorrect = true;
        state.test.questions.push(state.currentQuestion);
        bot.sendMessage(
          chatId,
          "–í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω. –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å? (–¥–∞/–Ω–µ—Ç)",
          {
            reply_markup: {
              keyboard: [["–î–∞", "–ù–µ—Ç"]],
              resize_keyboard: true,
            },
          }
        );
        state.step = "add_more";
      } else {
        bot.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:");
      }
    } else if (state.step === "add_more") {
      if (text.toLowerCase() === "–¥–∞") {
        bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:");
        state.step = "question";
      } else {
        const test = new Test(state.test);
        await test.save();
        bot.sendMessage(chatId, "‚úÖ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω!");
        userStates.delete(chatId);
        sendMainMenu(bot, chatId, msg.from.id);
      }
    }
  } else if (state.action === "set_broadcast" && admins.includes(msg.from.id)) {
    await Settings.updateOne({}, { broadcastMessage: text }, { upsert: true });
    bot.sendMessage(chatId, "‚úÖ –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.");
    userStates.delete(chatId);
    sendMainMenu(bot, chatId, msg.from.id);
  }
}

async function startTest(bot, chatId, userId, testId) {
  const test = await Test.findById(testId);
  if (!test) {
    return bot.sendMessage(chatId, "‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
  }

  let result = await Result.findOneAndUpdate(
    { userId: userId },
    { answers: [] },
    { new: true, runValidators: true }
  );

  if (!result) {
    result = new Result({
      userId,
      username:
        (await bot.getChatMember(chatId, userId)).user.username || "Unknown",
      testId,
      answers: [],
    });
    await result.save();
  }

  userStates.set(chatId, {
    action: "taking_test",
    testId,
    currentQuestionIndex: 0,
    resultId: result._id,
  });

  sendQuestion(bot, chatId, test, 0);
}

async function sendQuestion(bot, chatId, test, questionIndex) {
  if (questionIndex >= test.questions.length) {
    const result = await Result.findById(userStates.get(chatId).resultId);
    const correctAnswers = result.answers.filter((a) => a.isCorrect).length;
    const resultInfo = [];
    result.answers.map((item, id) => {
      resultInfo.push(
        `–í–æ–ø—Ä–æ—Å #${id + 1}: ${item.question} \n–û—Ç–≤–µ—Ç: ${
          item.isCorrect ? "‚úÖ" : "‚ùå"
        }`
      );
    });
    bot.sendMessage(
      chatId,
      `–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! ${correctAnswers}/${
        test.questions.length
      } –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: \n${resultInfo.join("\n")}`
    );
    userStates.delete(chatId);
    return;
  }

  const userState = userStates.get(chatId);
  if (userState?.lastMessageId) {
    try {
      await bot.deleteMessage(chatId, userState.lastMessageId);
    } catch (error) {
      console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:", error.message);
    }
  }

  const question = test.questions[questionIndex];
  const buttons = question.options.map((option, index) => [
    { text: option.text, callback_data: `answer_${questionIndex}_${index}` },
  ]);

  const sentMessage = await bot.sendMessage(chatId, question.text, {
    reply_markup: { inline_keyboard: buttons },
  });

  userStates.set(chatId, {
    ...(userStates.get(chatId) || {}),
    lastMessageId: sentMessage.message_id,
  });
}

async function handleTestAnswer(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;
  const state = userStates.get(chatId);

  if (!state || state.action !== "taking_test") {
    return bot.sendMessage(chatId, "‚ùå –¢–µ—Å—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.");
  }

  const [_, questionIndex, optionIndex] = data.split("_").map(Number);
  const test = await Test.findById(state.testId);
  const question = test.questions[questionIndex];
  const option = question.options[optionIndex];

  const result = await Result.findById(state.resultId);
  result.answers.push({
    question: question.text,
    chosenAnswer: option.text,
    isCorrect: option.isCorrect,
  });
  await result.save();

  state.currentQuestionIndex++;
  sendQuestion(bot, chatId, test, state.currentQuestionIndex);
}

module.exports = { handleButtons };
